import os, string, sys
pj = os.path.join

buildRoot = os.getcwd()
Export('buildRoot')

subdirs = []

def BuildGNUEnvironment(env):
   "Builds a base environment for other modules to build on."
   print 'Building for a GNU toolset.'
   CXXFLAGS = ['-Wall']
   CXXFLAGS.extend(['-DDEBUG', '-g'])

   env.AppendUnique(
      CPPPATH = [pj('#', 'external', 'include'), pj(buildRoot, 'phui'), 
                 buildRoot ],
      LIBPATH = [pj('#', 'external', 'lib')],
      CXXFLAGS = CXXFLAGS,
   )

def BuildWin32Environment(env):
   "Builds a base environment for the win32 platform"
   print 'Building with the win32 environment.'
   CPPDEFINES = Split('WIN32 _DEBUG_ _LIB')
   CXXFLAGS = Split('/ZI /nologo /W3 /Od /FD /EHsc /RTC1 /MDd /TP')
   LINKFLAGS = Split('/NOLOGO')
   CPPPATH = [ pj(buildRoot, 'external', 'include'), pj(buildRoot, 'phui') ]
   LIBPATH = [ pj(buildRoot, 'external', 'lib') ]
   env.AppendUnique(CPPDEFINES = CPPDEFINES,
                    CXXFLAGS = CXXFLAGS,
                    LINKFLAGS = LINKFLAGS,
                    CPPPATH = CPPPATH,
                    LIBPATH = LIBPATH)

def ParseConfig(env, command, options):
   "Parses xxx-config style output for compilation directives"

   cmd = WhereIs(command)
   if cmd is None:
      print "Error: Could not find %s" % command
      sys.exit(-1)

   # Run the command
   cmd = cmd + ' ' + string.join(options)
   params = string.split(os.popen(cmd).read())

   # Parse its output
   for arg in params:
      switch = arg[0:1]
      option = arg[1:2]
      if switch == '-':
         if option == 'I':
            env['CPPPATH'].append(arg[2:])
         elif option == 'L':
            env['LIBPATH'].append(arg[2:])
         elif option == 'l':
            env['LIBS'].append(arg[2:])
         elif arg[0:11] == '-Wl,-rpath,':
            env['LINKFLAGS'].append(arg)
         else:
            env['CXXFLAGS'].append(arg)
      else:
         # Must be a static library, add it to the libs
         env['LIBS'].append(arg)

def SetupGLText(cc, env):
   "Sets up the given environment for gltext."
   res = 1
   res = res and cc.CheckLibWithHeader('gltext', 'gltext/gltext.h', 'c++')
   if not res:
      print "[WRN] No local gltext found; building our own."
      subdirs.append( pj('external', 'src', 'gltext-0.3.1') )  

def SetupCppDom(env):
   "Sets up the given environment for CppDom"
   env.Append(LIBS = ['cppdom'])

def SetupCppUnit(env):
   "Sets up the given environment for CppUnit"
   ParseConfig(env, 'cppunit-config', Split('--cflags --libs'))

def SetupOpenGL(cc, env):
   "Sets up the given environment to be able to build with OpenGL"
   res = 1
   # CYGWIN
   if env['PLATFORM'] == 'cygwin':
      res = res and cc.CheckLibWithHeader('opengl32', 'GL/gl.h', 'c++')
      res = res and cc.CheckLibWithHeader('glu32', 'GL/gl.h', 'c++')

   # IRIX
   elif env['PLATFORM'] == 'irix':
      res = res and cc.CheckLibWithHeader('GL', 'GL/gl.h', 'c++')
      res = res and cc.CheckLibWithHEader('GL', 'GL/gl.h', 'c++')
      res = res and cc.CheckLib('X11')
      res = res and cc.CheckLib('Xmu')

   # GENERIC GNU
   elif env['PLATFORM'] == 'posix':
      res = res and cc.CheckLibWithHeader('GLU', 'GL/gl.h', 'c++')
      res = res and cc.CheckLibWithHeader('GL', 'GL/gl.h', 'c++')
   elif env['PLATFORM'] == 'win32':
      gl_headers = ['windows.h', 'GL/gl.h']
      glu_headers = gl_headers[:]
      glu_headers.append('GL/glu.h')
      res = res and cc.CheckLibWithHeader('opengl32.lib', gl_headers, 'c++')
      res = res and cc.CheckLibWithHeader('glu32.lib', glu_headers, 'c++')
   else:
      print '[WRN] Unknown platform ' + env['PLATFORM']
      res = res and cc.CheckLibWithHeader('GLU', 'GL/gl.h', 'c++')
      res = res and cc.CheckLibWithHeader('GL', 'GL/gl.h', 'c++')
   if not res:
      print "[ERR] You don't appear to have OpenGL libraries/headers installed."
      sys.exit(1)
      
def SetupPython(env, requiredVersion):
   "Sets up the environment for Python"
   print 'Looking for python 2.2 ...'
   python = WhereIs('python')
   if not python:
      print 'WARNING: Can\'t find python executable'
      return

   py_cmd = python + ' -c \'import sys; print sys.prefix; print sys.version[:3]\''
   (prefix, py_ver) = string.split(os.popen(py_cmd).read())

   # Version must match
   if py_ver != requiredVersion:
      print 'WARNING: Python version ' + py_ver + ' != ' + requiredVersion
      return

   # Build up the env information
   py_cpppath = pj(prefix, 'include', 'python'+py_ver)
   py_libpath = pj(prefix, 'lib', 'python'+py_ver, 'config')
   py_lib = 'python'+py_ver

   # Setup the env
   env.Append(CPPPATH   = [py_cpppath],
              LIBPATH   = [py_libpath],
              LIBS      = [py_lib, 'pthread'])

def SetupBoostPython(env):
   "Sets up the env for Boost Python"
   env.Append(LIBS = ['boost_python'])

def SetupSDL(cc, env):
   "Sets up the given environment for SDL"
   if env.Dictionary().has_key('sdl_dir'):
      sdl_dir = env.Dictionary()['sdl_dir']
      cc.env.AppendUnique( CPPPATH = [pj(sdl_dir, 'include')],
                           LIBPATH = [pj(sdl_dir, 'lib')] )
   res = 1
   if env['PLATFORM'] == 'win32':
      res = res and cc.CheckLibWithHeader('SDL', 'SDL.h', 'c++')
   else:
      res = res and cc.CheckLibWithHeader('SDL', 'SDL/SDL.h', 'c++')
   if res == 0:
      print "[ERR] You don't appear to have SDL installed.  Get it at http://www.libsdl.org"
      env.Dictionary()['sdl'] = 0
   elif env.Dictionary().has_key('sdl_dir'):
      env.AppendUnique( CPPPATH = [pj(sdl_dir, 'include')],
                        LIBPATH = [pj(sdl_dir, 'lib')] )

def SetupGLUT(cc, env):
   "Sets up the given environment to be able to build with GLUT"
   res = 1
   # Win32
   if env['PLATFORM'] == 'win32':
      res = res and cc.CheckLibWithHeader('glut32', 'GL/glut.h', 'c++')
   # POSIX (Linux)
   elif env['PLATFORM'] == 'posix':
      res = res and cc.CheckLibWithHeader('glut', 'GL/glut.h', 'c++')
   # Assume GNU something.
   else:
      res = res and cc.CheckLibWithHeader('glut', 'GL/glut.h', 'c++')

   if not res:
      print "[ERR] You don't appear to have GLUT installed; disabling the GLUT driver for now."
      env.Dictionary()['glut'] = 0

def SetupVRJuggler(cc, env):
   "Sets up the environment to build the VR Juggler phui library."
   print '[WRN] The VR Juggler driver is currently under development.'
   env.Dictionary()['vrjuggler'] = 0

Export('ParseConfig')
Export('SetupGLText SetupCppDom SetupCppUnit SetupOpenGL SetupSDL SetupGLUT')
Export('SetupPython SetupBoostPython')

def GetPhuiVersion():
   "Gets the Phui version from the phui/Version.h header"
   import re
   contents = open('phui/Version.h', 'r').read()
   major = re.compile('.*(#define *PHUI_VERSION_MAJOR *(\d+)).*', re.DOTALL).sub(r'\2', contents)
   minor = re.compile('.*(#define *PHUI_VERSION_MINOR *(\d+)).*', re.DOTALL).sub(r'\2', contents)
   patch = re.compile('.*(#define *PHUI_VERSION_PATCH *(\d+)).*', re.DOTALL).sub(r'\2', contents)
   return '%d.%d.%d' % (int(major), int(minor), int(patch))


# Make sure SCons is recent enough.
EnsureSConsVersion(0,9)

# Build the base environment.
baseEnv = Environment(ENV = os.environ)
if baseEnv['PLATFORM'] == 'win32':
   BuildWin32Environment(baseEnv)
elif baseEnv['PLATFORM'] == 'posix':
   BuildGNUEnvironment(baseEnv)
else:
   BuildGNUEnvironment(baseEnv)
Export('baseEnv')

# Check for command line options
options = Options('options.cache', ARGUMENTS)

# Build Type options
dbg_opt = BoolOption('debug', 'Build phui with debug symbols.', 'yes')
opt_opt = BoolOption('optimize', 'Turn on compiler optimizations.', 'no')
pro_opt = BoolOption('profile', 'Build phui with profiling information.', 'no')
options.AddOptions(dbg_opt, opt_opt, pro_opt)

# Installation options
if sys.platform == 'win32':
   default_prefix = pj('phui')
else:
   default_prefix = pj('/', 'usr', 'local') 
pre_opt = PathOption('prefix', 'The prefix to use when installing phui.', 
                      default_prefix)
options.AddOptions(pre_opt)

# Package Options
cpu_opt = BoolOption('cppunit', 'Build phui with CppUnit support.', 'no')
sdl_opt = BoolOption('sdl', 'Build the SDL phui Driver.', 'yes')
vrj_opt = BoolOption('vrjuggler', 'Build the VR Juggler phui Driver.', 'no')
glu_opt = BoolOption('glut', 'Build the GLUT phui Driver.', 'yes')
options.AddOptions(cpu_opt, sdl_opt, vrj_opt, glu_opt)

# Path Options
if sys.platform == 'win32':
   default_sdl_path = 'C:\\SDL'
else:
   default_sdl_path = pj('/', 'usr', 'local')
sdl_path_opt = PathOption('sdl_dir', 'Root location of the SDL installation.', default_sdl_path)
options.AddOptions(sdl_path_opt)
options.Update(baseEnv)
options.Save('options.cache', baseEnv)

if ARGUMENTS.has_key('help'):
   Help(options.GenerateHelpText(baseEnv))
   sys.exit(1)

# Verify validity of options.
cc = baseEnv.Configure()
dict = baseEnv.Dictionary()

if dict['sdl']:
   SetupSDL(cc, baseEnv)
if dict['vrjuggler']: 
   SetupVRJuggler(cc, baseEnv)
if dict['glut']:
   SetupGLUT(cc, baseEnv)
if dict['cppunit']:
   SetupCppUnit(cc, baseEnv)

if 'install' in COMMAND_LINE_TARGETS:
   subdirs.append( pj('external', 'src', 'gltext-0.3.1') )  

# Finally, check dependencies
SetupOpenGL(cc, baseEnv)
SetupGLText(cc, baseEnv)
cc.Finish()

#------------------------------------------------------------------------------
# Grok the arguments to this build
#------------------------------------------------------------------------------

# Recurse
#subdirs = Split('phui examples')
subdirs.extend( Split('phui examples') )
SConscript(dirs = subdirs)

Default('.')
