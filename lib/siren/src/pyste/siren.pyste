# *************************************************************** siren-cpr beg
#
# siren - flexible 3D game engine
# siren is (C) Copyright 2003 by members of the
#    Iowa State University Game Developers Club
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# -----------------------------------------------------------------
# File:          $RCSfile: siren.pyste,v $
# Date modified: $Date: 2003-05-21 00:34:13 $
# Version:       $Revision: 1.6 $
# -----------------------------------------------------------------
#
# *************************************************************** siren-cpr-end
Kernel = Class('siren::Kernel', 'siren/Kernel.h')

# SDL helpers =================================================================
Key = Enum('SDLKey', 'siren/State.h')
rename(Key, 'Key')
WarpMouse = Function('SDL_WarpMouse', 'siren/State.h')
rename(WarpMouse, 'WarpMouse')
# ================================================================= SDL helpers

# State Subsystem =============================================================
State = Class('siren::State', 'siren/State.h')

StateFactory = Class('siren::StateFactory', 'siren/StateFactory.h')
set_policy(StateFactory.getInstance, return_value_policy(reference_existing_object))
StateCreator = Class('siren::StateCreator', 'siren/StateFactory.h')
# ============================================================= State Subsystem

# Sound Subsystem =============================================================
SoundManager = Class('siren::SoundManager', 'siren/sound/SoundManager.h')
set_policy(SoundManager.getJukebox, return_internal_reference())
set_policy(SoundManager.getSoundEffectManager, return_internal_reference())

Jukebox = Class('siren::Jukebox', 'siren/sound/Jukebox.h')
set_policy(Jukebox.getTrack, return_internal_reference())

SoundEffectManager = Class('siren::SoundEffectManager', 'siren/sound/SoundEffectManager.h')
# ============================================================= Sound Subsystem

# Resource Subsystem ==========================================================
Texture = Class('siren::Texture', 'siren/Texture.h')
set_policy(Texture.create, return_value_policy(reference_existing_object))
# ========================================================== Resource Subsystem


# Avatar Subsystem ============================================================
Avatar = Class('siren::Avatar', 'siren/avatar/Avatar.h')
set_policy(Avatar.create, return_value_policy(reference_existing_object))
set_policy(Avatar.getRotXYZ, return_internal_reference())
set_policy(Avatar.getPos, return_internal_reference())
exclude(Avatar.getBone)
exclude(Avatar.model)
# ============================================================ Avatar Subsystem

# Input Subsystem =============================================================
InputManager = Class('siren::InputManager', 'siren/input/InputManager.h')
set_policy(InputManager.getAction, return_internal_reference())

InputAction = Class('siren::InputAction', 'siren/input/InputAction.h')
# ============================================================= Input Subsystem
