import os, string, sys
pj = os.path.join

# Pull in the AutoDist module
sys.path = [pj('tools', 'build')] + sys.path
from AutoDist import *

# Check for the optimize option
optimize = 0
if ARGUMENTS.get('opt', 0):
   optimize = 1

# Check for an install prefix
if ARGUMENTS.get('prefix', 0):
   Prefix(ARGUMENTS['prefix'])


#------------------------------------------------------------------------------
# Define some generally useful functions
#------------------------------------------------------------------------------
def GetPlatform():
   "Determines what platform this build is being run on."
   if string.find(sys.platform, 'irix') != -1:
      return 'irix'
   elif string.find(sys.platform, 'linux') != -1:
      return 'linux'
   elif string.find(sys.platform, 'cygwin') != -1:
      return 'win32'
   elif string.find(os.name, 'win32') != -1:
      return 'win32'
   else:
      return sys.platform
Export('GetPlatform')

def BuildBaseEnvironment():
   "Builds a base environment for other modules to build on."
   global optimize, profile

   CXX = WhereIs('g++3') or 'g++'
   LINK = CXX
   CXXFLAGS = ['-Wall', '-Wno-non-virtual-dtor']
   LINKFLAGS = []

   if optimize:
      CXXFLAGS.extend(['-DNDEBUG', '-O2'])
   else:
      CXXFLAGS.extend(['-DDEBUG', '-g'])

   env = Environment(
      ENV = os.environ,
      CXX = CXX,
      LINK = LINK,
      CPPPATH = [],
      LIBPATH = [],
      LIBS = [],
      CXXFLAGS = CXXFLAGS,
      LINKFLAGS = LINKFLAGS,
   )

   return env


def ParseConfig(env, command, options):
   "Parses xxx-config style output for compilation directives"

   cmd = WhereIs(command)
   if cmd is None:
      print "Error: Could not find %s" % command
      sys.exit(-1)

   # Run the command
   cmd = cmd + ' ' + string.join(options)
   params = string.split(os.popen(cmd).read())

   # Parse its output
   for arg in params:
      switch = arg[0:1]
      option = arg[1:2]
      if switch == '-':
         if option == 'I':
            env.Append(CPPPATH = [arg[2:]])
         elif option == 'L':
            env.Append(LIBPATH = [arg[2:]])
         elif option == 'l':
            env.Append(LIBS = [arg[2:]])
         elif arg[0:11] == '-Wl,-rpath,':
            env.Append(LINKFLAGS = [arg])
         else:
            env.Append(CXXFLAGS = [arg])
      else:
         # Must be a static library, add it to the libs
         env.Append(LIBS = [arg])

def SetupSDL(env):
   "Sets up the given environment for SDL"
   ParseConfig(env, 'sdl-config', Split('--cflags --libs'))

def SetupAudiere(env):
   "Sets up the given environment for Audiere"
   env.Append(LIBS = ['audiere'])

def SetupCal3D(env):
   "Sets up the given environment for Cal3D"
   env.Append(LIBS = ['cal3d'])

def SetupCorona(env):
   "Sets up the given environment for Corona"
   env.Append(LIBS = ['corona'])

def SetupCppUnit(env):
   "Sets up the given environment for CppUnit"
   ParseConfig(env, 'cppunit-config', Split('--cflags --libs'))

def SetupOpenGL(env):
   "Sets up the given environment to be able to build with OpenGL"
   # CYGWIN
   if sys.platform == 'cygwin':
       OPENGL_LIBS = ['opengl32', 'glu32']

   # IRIX
   elif string.find(sys.platform, 'irix') != -1:
       OPENGL_LIBS = ['GLU', 'GL', 'X11', 'Xmu']

   # GENERIC (LINUX?)
   else:
       OPENGL_LIBS = ['GLU', 'GL']

   # Add in the OpenGL libs to the environment
   env.Append(LIBS = OPENGL_LIBS)

def SetupPython(env, requiredVersion):
   "Sets up the environment for Python"
   print 'Looking for python 2.2 ...'
   python = WhereIs('python')
   if not python:
      print 'WARNING: Can\'t find python executable'
      return

   py_cmd = python + ' -c \'import sys; print sys.prefix; print sys.version[:3]\''
   (prefix, py_ver) = string.split(os.popen(py_cmd).read())

   # Version must match
   if py_ver != requiredVersion:
      print 'WARNING: Python version ' + py_ver + ' != ' + requiredVersion
      return

   # Build up the env information
   py_cpppath = pj(prefix, 'include', 'python'+py_ver)
   py_libpath = pj(prefix, 'lib', 'python'+py_ver, 'config')
   py_lib = 'python'+py_ver

   # Setup the env
   env.Append(CPPPATH   = [py_cpppath],
              LIBPATH   = [py_libpath],
              LIBS      = [py_lib, 'pthread', 'util'])

def SetupBoostPython(env):
   "Sets up the env for Boost Python"
   env.Append(LIBS = ['boost_python'])

Export('ParseConfig')
Export('SetupSDL SetupAudiere SetupCal3D SetupCorona SetupCppUnit SetupOpenGL')
Export('SetupPython SetupBoostPython')


def GetSirenVersion():
   "Gets the Siren version from the src/siren/Version.h header"
   import re
   contents = open('src/siren/Version.h', 'r').read()
   major = re.compile('.*(#define *SIREN_VERSION_MAJOR *(\d+)).*', re.DOTALL).sub(r'\2', contents)
   minor = re.compile('.*(#define *SIREN_VERSION_MINOR *(\d+)).*', re.DOTALL).sub(r'\2', contents)
   patch = re.compile('.*(#define *SIREN_VERSION_PATCH *(\d+)).*', re.DOTALL).sub(r'\2', contents)
   return '%d.%d.%d' % (int(major), int(minor), int(patch))


#------------------------------------------------------------------------------
# Grok the arguments to this build
#------------------------------------------------------------------------------
EnsureSConsVersion(0,11)
baseEnv = BuildBaseEnvironment()
Export('baseEnv')

# Create the Siren package
pkg = Package('siren', GetSirenVersion())
pkg.addExtraDist(Split("""
   AUTHORS
   ChangeLog
   COPYING
   README
   SConstruct
   src/SConscript
   src/siren/SConscript
   src/siren/input/SConscript
   src/siren/sound/SConscript
   tools/build/AutoDist.py
"""))
Export('pkg')

builddir = pj('build', GetPlatform())
Export('builddir')
BuildDir(builddir, '.')

# Recurse
subdirs = Split('src test')
SConscript(dirs = subdirs)
#for dir in subdirs:
#   SConscript(dirs = pj(builddir, dir))

pkg.build()

Default('.')
