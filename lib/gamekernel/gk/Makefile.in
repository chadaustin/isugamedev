################### <MK heading BEGIN do not edit this line> #################
#
# mk build system - really simple build system using GNU make
# mk is (C) Copyright 2001-2002 by Kevin Meinert, Patrick Hartling
#
# Authors: Kevin Meinert <kevin@vrsource.org>
#          Patrick Hartling <patrick@vrac.iastate.edu>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# -----------------------------------------------------------------
# File:          $RCSfile: Makefile.in,v $
# Date modified: $Date: 2002-02-21 05:13:43 $
# Version:       $Revision: 1.3 $
# -----------------------------------------------------------------
#
################## <MK heading END do not edit this line> ###################

srcdir=@srcdir@
top_srcdir=@top_srcdir@
prefix=@prefix@
exec_prefix=@exec_prefix@

includedir=@includedir@
libdir=@libdir@
datadir=@datadir@
mandir=@mandir@

gkincludedir=$(includedir)/gk
gklibdir=$(libdir)/gk
gkdatadir=$(datadir)/gk

INSTALL=@INSTALL@
INSTALL_DATA=@INSTALL_DATA@

# objects to be included in the project....
SRCS = \
	AnalogDevice.h \
	AnalogInput.h \
	AnalogInterface.h \
	ContextData.h \
	Device.h \
	DigitalDevice.h \
	DigitalInput.h \
	DigitalInterface.h \
	EventInput.h \
	GameApp.h \
	GameInputConfigure.h \
	GameInput.h \
	GameKernel.h \
	GameKernel.cpp \
	gkCommon.h \
	Input.h \
	InputInterface.h \
	Joystick.h \
	Keyboard.h \
	Mouse.h \
	Singleton.h \
	SystemDriver.h \
	SystemDriverFactory.h \
	SystemDriverFactory.cpp \
	Version.h \
	Version.cpp \
	xmlparser.cpp xmlpp.cpp xmltokenizer.cpp

# project name...
PROJECT_NAME = gk


OBJDIR = .
DEPDIR = 

PATH_TO_SRCS = $(srcdir):$(top_srcdir)/xmlpp
MK_DIR = $(top_srcdir)/mk
INCLUDE_PATHS = -I$(top_srcdir) -I$(top_srcdir)/external/xdl @INCLUDES@
LIBS=@LIBS@
DEFS=@GK_DEFS@

################################################################################
# system dependent stuff, that users will want to change...
# stuff that cant be abstracted in the build system...
################################################################################
include ${MK_DIR}/mk.hosttype
include ${MK_DIR}/mk.platform

################################################################################
include ${MK_DIR}/mk.objs

# default targets
default: all
all:
	$(top_srcdir)/tools/makever.sh --version-file="$(top_srcdir)/VERSION" gkVersion.h.in
	$(MAKE) DO_DEPEND=Y all-redirect

all-redirect: $(LIB_FILENAME) $(STATIC_LIB_FILENAME)
	-@echo ""
	-@echo "-------------------------------------------"
	-@echo "$(FILENAME) done"
	-@echo "-------------------------------------------"


# Compile then Link
$(LIB_FILENAME): $(OBJS)
	-@echo ""
	-@echo "-------------------------------------------"
	-@echo "Linking... (.$(OBJ_FILE_SUFFIX)'s --> .so)"
	-@echo "-------------------------------------------"
	$(SO_LINKER) $(SO_FLAGS) $(OBJS) $(OUTPUT_LIB_FLAG)$(LIB_FILENAME) $(LIBS)

$(STATIC_LIB_FILENAME): $(OBJS)
	-@echo ""
	-@echo "-------------------------------------------"
	-@echo "Linking... (.$(OBJ_FILE_SUFFIX)'s --> .a)"
	-@echo "-------------------------------------------"
	$(STATIC_LINKER) $(STATIC_FLAGS) $(OUTPUT_STATIC_LIB_FLAG)$(STATIC_LIB_FILENAME) $(OBJS) 

################################################################################
# Install target
install: install-libs install-headers

install-libs:
	$(INSTALL) $(LIB_FILENAME) $(libdir)/$(LIB_FILENAME)
	$(INSTALL) $(STATIC_LIB_FILENAME) $(libdir)/$(STATIC_LIB_FILENAME)


# Loop over the header suffixes to filter out the header files from the given list
_header_suffix_list = h hpp hh
makeheaders = $(foreach _suffix, $(_header_suffix_list), $(filter %.$(_suffix), $1))
HEADERS=$(call makeheaders, $(SRCS))

install-headers:
	-mkdir $(gkincludedir)
	@list='$(HEADERS)'; for h in $$list; do \
		if test -f "$$h"; then d= ; else d="$(srcdir)/"; fi; \
		echo " $(INSTALL_DATA) $$d$$h $(gkincludedir)/$$h"; \
		$(INSTALL_DATA) $$d$$h $(gkincludedir)/$$h; \
	done

################################################################################
# Uninstall target
uninstall: uninstall-libs uninstall-headers

uninstall-libs:
	rm -f $(libdir)/$(LIB_FILENAME)
	rm -f $(libdir)/$(STATIC_LIB_FILENAME)

uninstall-headers:
	@list='$(HEADERS)'; for h in $$list; do \
		rm -f $(gkincludedir)/$$h; \
	done
	-rmdir $(gkincludedir)


################################################################################
# Remove the compiled stuff from the system
clean:
	-@echo ""
	-@echo "-------------------------------------------"
	-@echo "Removing compiled stuff from the system	 "
	-@echo "-------------------------------------------"
	-rm -r $(OBJS) $(STATIC_LIB_FILENAME) $(LIB_FILENAME) *.ncb *.opt *.plg *.ilk *.idb *.pdb *.pch Debug/ Release/ ii_files/

clobber: clean
	-rm *.d

ifdef DO_DEPEND
include ${MK_DIR}/mk.depend
endif
