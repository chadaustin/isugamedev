# build with 'scons'
import sys
import os
import string

# Check for optimize option
optimize = 0
if ARGUMENTS.get('opt', 0):
   optimize = 1

# Check for profile option
profile = 0
if ARGUMENTS.get('profile', 0):
   profile = 1

# Check for an install prefix
PREFIX = '/usr/local'
if ARGUMENTS.get('prefix'):
   PREFIX = ARGUMENTS['prefix']
Export('PREFIX')


def BuildBaseEnvironment():
   global optimize, profile

   "Builds a base environment for other modules to build on."

   CXXFLAGS = ['-Wall', '-Wno-non-virtual-dtor']
   LINKFLAGS = []

   if optimize:
      CXXFLAGS.extend(['-DNDEBUG', '-O2'])
   else:
      CXXFLAGS.extend(['-DDEBUG', '-g'])

   if profile:
      CXXFLAGS.extend(['-pg'])
      LINKFLAGS.extend(['-pg'])

   env = Environment(
      ENV = os.environ,
      CPPPATH = [],
      LIBPATH = [],
      LIBS = [],
      CXXFLAGS = CXXFLAGS,
      LINKFLAGS = LINKFLAGS,
   )

   return env


def ParseConfig(env, command, options):
   "Parses xxx-config style output for compilation directives"

   # Run the command
   where = WhereIs(command)
   if not where:
      print '%s not found in PATH' % command
      sys.exit(-1)
   cmd = where + ' ' + string.join(options)
   params = string.split(os.popen(cmd).read())

   # Parse its output
   for arg in params:
      switch = arg[0:1]
      option = arg[1:2]
      if switch == '-':
         if option == 'I':
            env['CPPPATH'].append(arg[2:])
         elif option == 'L':
            env['LIBPATH'].append(arg[2:])
         elif option == 'l':
            env['LIBS'].append(arg[2:])
         elif arg[0:11] == '-Wl,-rpath,':
            env['LINKFLAGS'].append(arg)
         else:
            env['CXXFLAGS'].append(arg)
      else:
         # Must be a static library, add it to the libs
         env['LIBS'].append(arg)

def SetupSDL(env):
   "Sets up the given environment for SDL"
   ParseConfig(env, 'sdl-config', Split('--cflags --libs'))

def SetupCorona(env):
   "Sets up the given environment for Corona"
   if not env.Dictionary().has_key('LIBS'): env['LIBS'] = []
   env['LIBS'].extend(['corona'])

def SetupAudiere(env):
   "Sets up the given environment for Audiere"
   if not env.Dictionary().has_key('LIBS'): env['LIBS'] = []
   env['LIBS'].extend(['audiere'])

def SetupGLText(env):
   "Sets up the given enviroment for GLText"
   if not env.Dictionary().has_key('LIBS'): env['LIBS'] = []
   env['LIBS'].extend(['gltext'])

def SetupOpenGL(env):
   "Sets up the given environment for OpenGL"
   if not env.Dictionary().has_key('LIBS'): env['LIBS'] = []
   env['LIBS'].extend(['GL', 'GLU'])

Export('ParseConfig')
Export('SetupSDL SetupCorona SetupAudiere SetupGLText SetupOpenGL')

# create the base environment
baseEnv = BuildBaseEnvironment()
Export('baseEnv')

# recurse
subdirs = Split('src test')
SConscript(dirs = subdirs)

# install target
baseEnv.Alias('install', PREFIX)

# build all sources by default but not the tests
Default('src')
