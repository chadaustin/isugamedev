from os import path

Import('baseEnv PREFIX BuildInfo')
Import('SetupSDL SetupCorona SetupAudiere SetupGLText SetupOpenSG SetupOpenGL')

# Listed here are interfaces that only have a .h associated with them
interfaces = Split("""
   CollisionDetector
   CollisionListener
   Entity
   SceneListener
   SceneViewer
   SpatialIndex
   Weapon
""")

# Listed here are classes that have a .h and a .cpp file associated with them
classes = Split("""
   AbstractEntity
   AmmoBag
   AmmoCrate
   Application
   BaseBullet
   BaseProjectileWeapon
   BoundsCollisionDetector
   Camera
   CollisionDesc
   CollisionResponse
   CreditsState
   Enemy
   EntityFactory
   GameManager
   GameScene
   GameState
   HUD
   HomingMissile
   IntroState
   InputAction
   InputBinder
   InputParser
   InputSymbol
   Jukebox
   LoadState
   MenuState
   MissileLauncher
   ModelManager
   OpenSGSceneViewer
   Particle
   ParticleEngine
   PhysicsEngine
   Player
   ResourceManager
   RigidBody
   Scene
   SceneEvent
   Shotgun
   State
   StateFactory
   SoundEffectManager
   SoundManager
   SpreadGun
   StoryState
   Texture
   TextureManager
   Turret
   cubeGeometry
""")

buildInfo = BuildInfo()

# Listed here are headers that have no associated .cpp file
buildInfo.addHeaders(map(File, Split("""
   AssaultRifle.h
   BodyState.h
   CollisionEvent.h
   LokiTypeInfo.h
   NullCollisionDetector.h
   UIDManager.h
   VectorSpatialIndex.h
   Version.h
""")))

# Listed here are sources that have no associated .h file
buildInfo.addSources(map(File, Split("""
   Main.cpp
""")))

buildInfo.addExtraDist(map(File, Split("""
   SConscript
""")))

buildInfo.addHeaders(map(lambda n: File(n + '.h'),    interfaces))
buildInfo.addHeaders(map(lambda n: File(n + '.h'),    classes))
buildInfo.addSources(map(lambda n: File(n + '.cpp'),  classes))

env = baseEnv.Copy()

env ['LIBS'].extend(['Loom'])
env ['LIBS'].extend(['OSGSystem','OSGBase'])

SetupSDL(env)
SetupCorona(env)
SetupAudiere(env)
SetupGLText(env)
SetupOpenSG(env)
SetupOpenGL(env)

buildInfo.addPrograms([
    env.Program('../build/midworld', buildInfo.getSources())
])
env.Install(path.join(PREFIX, 'bin'), buildInfo.getPrograms())

Return('buildInfo')
