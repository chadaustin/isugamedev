/* Generated by Together */

#ifndef MW_ABSTRACT_ENTITY_H
#define MW_ABSTRACT_ENTITY_H

#include "UIDManager.h"
#include "Entity.h"

namespace mw
{
   /**
    * Provides an abstract base implementation of Entity that handles the stuff
    * common to virtually every Entity implementation. This includes automatic
    * unique ID management as well as model ID management.
    */
   class AbstractEntity : public Entity
   {
   protected:
      /**
       * Initializes this abstract entity with a new unique ID.
       */
      AbstractEntity();

      /**
       * Destroys this abstract entity and releases the unique ID it had
       * reserved.
       */
      virtual ~AbstractEntity();

   public:
      /**
       * Gets the ID of the model this entity requires.
       */
      int getModel() const;

      /**
       * Sets the ID of the model this entity requires.
       */
      void setModel(int model);

      /**
       * Gets the unique ID of this entity.
       */
      const UID& getUID() const;

   private:
      /**
       * The unique ID associated with this entity.
       */
      UID mUID;

      /**
       * The model ID this entity uses.
       */
      int mModel;
   };
}

#endif
