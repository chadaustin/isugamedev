Note: orgional requirements doc at:

http://www.vrac.iastate.edu/~bscott/wb/cs309_requirements_group6.doc


[ Title Page ]



     Test Plan
     Computer Science 309

     Spring 2002 Term project







     Document Owner 
     Team 6

     Ben Scott
     Chad Austin
     Chad Okere
     Jeremy Hanson
     Josh Carlson




Table of Contents
    
    1. System Description
    2. Major Tests
    3. Traceability Matrix
    4. Test Description
    5. Test Analysis


1.  System Description

     1.1.  Overview

     Warn-a-Brotha uses client-server architecture to allow for
     multiple people to play a racing game at the same time.  The
     client is a relatively simple system, which does little more then
     display the world and move around as the server tells it to.  The
     client uses the networking components (connection manager,
     networking, threading) as well as the input, sound, texture, and
     UI components.  The server is much more sophisticated,
     responsible for managing the state of the world, calculating the
     physics, storing all the game world related data, as well as
     handling requests for reports based on the data.  It uses the
     Connection Manager, Data, Game Logic, Network, Report server, and
     of course the Thread subsystems.

     The client/server networking will be over TCP/IP using our own
     networking object library, which will include a socket, stream,
     and serialization subsystem.  The report server will use the same
     socket libraries, but be based on HTTP, so that you'll just need
     a web browser to query against it.

     The client side graphics will be displayed using OpenGL 3D
     rendering, input will be handled using SDL, and will be converted
     into command requests which will be sent to the server to be
     processed.

     The Game Logic component will handle user commands sent to the
     server and apply to the game world's state.

     1.2.  Description of Test Environment

     The system will be tested on both windows and Linux, using a
     combination of CppUnit and custom-written testing programs.  The
     tests will be conducted by individual group members on their
     personal computers.

     1.3.  Test Phase Overview

       1.3.1.  Test Preparation

       The code will be prepared for use with CppUnit, and custom test
       programs will be written to test parts of the system.

       1.3.2.  Test Execution

       The test programs will be run and the output may be examined
       manually or automatically.

       1.3.3.  In Case of Anomaly

       If an anomaly is detected, the error will be recorded, and
       testing will continue. Later the bug will be tracked down and
       corrected after which testing will commence again.

2.  Major Tests

     2.1.  Unit Tests

         We will test the message object serialization and
         deserialization.  We will also test XML loading and saving,
         along with the database layer.

     2.2.  Integration Tests

         We will verify that the networking, threading, and message
         subsystems work properly together in the high-level network manager.

     2.3.  Functional Tests
      A. Login
         Strategy:
            - Check to make sure users can log in successfully.

         What to Test:
            1. Username and password are sent to the server.
            2. Password is authenticated by the server.
            3. Invalid username causes login failure.
            4. Inavlid password causes login failure.
            5. Valid username/password combination allows successful login.






3.  Test Descriptions  



       

      3.1 Network



          (for each test)

          1 Requirements

          2 Methods

          3 Test Procedures





      3.2 Data XML subsystem



          (for each test)

          1 Requirements

          2 Methods

          3 Test Procedures





          Test 32A Storage/save test:

          Requirements



            Functions: XML API for populating data, data saving



          Methods



            White box testing will be used, in order to assure that
            all the code works, all the different types of information
            used by the system will be entered.



          Test procedures.



            A short program will be written to populate the data
            structure with pre-defined information using the API, and
            the XML structure will be written out to the console.
            That structure will be visually analyzed to make sure all
            the information is present.  The test data used will fill
            the structure with all used information.

          





          Test 32B Data loading test

          Requirements 



            Functions: loading and saving data.



          Methods

          

            White box testing will be used as in the test 32B.



          Test procedures



          

            An XML file will be written that includes all the possible
            types of information available to the system.  A short
            program will be written that will load the file into
            memory, and then re-encode it into XML.  The resulting XML
            file will then be compared with the original.

           

          

        



      3.3 Game Logic

        

	  Test 33A Adding and removing players to game


	    
  	  Requirements/ functions tested


	    
	    Requirements:  3.01, 3.02

	    Functions:  Adding and removing players from game.



	  Methods
	

	      White box testing will be used to execute every line of
	      code in the adding players and removing players
	      functions.



	    Test procedures



	      A function was created that lists off every player in
	      the game at one given moment.  A program was then
	      created that would add many different players and print
	      off the results after each addition; the program would
	      then delete the names in random order until all the
	      players were deleted from the game.




        Test 33B Moving the vehicle


	  Requirements/ functions tested


          Requirements:  3.1, 3.2, 3.4, 3.5 (3.3 is no longer relevant)

	    Functions:  process input.


	  Methods



	    	Black box testing will be used to test functionality for
	    	acceleration, velocity, and turning left and right.



	  Test procedures



            These functions just query for input and see which buttons
            are being pressed.  To test these we will be in the actual
            program and go through each of the command and determine
            how well each command is implemented.  We should be able
            so see physically how the vehicle moves and determine
            whether or not it is an acceptable function.



        Test 33C Collisions



          Requirements:  3.9

	    Functions:  Update (Collisions)
          
          Methods



          Black box testing will be used to test functionality for colliding
          objects.



          Test procedure:  



          To test collisions, we will run the actual program and make
	  two objects collide a number of times.  With each collision,
	  the object’s health should decrease and eventually the
	  player should be given a message that he is dead and will be
	  placed back into the garage.


         


      3.4 Report Server



           

          

          Test 34A Report generation



          Requirements/ functions tested



           Requirements: 5.3, 5.3.5, 5.3.5.1, 5.3.5.2 (5.3.5.2 is no
           longer relevant)

           Functions: report generation.



          Methods



            White box testing will be used to execute each bit of code
            in the report generation section

          

          Test procedures



          The reports server subcomponents generate HTML from a query
          string.  A simple web page be written, with several
          different types of queries created to give complete code
          coverage.  When each link is clicked at test will be done.
          The reports will be outputted to several HTML files, and
          visually examined for correctness.  Additionally, invalid
          queries will be sent to make sure an error is sent



          The attempted queries will be as follows:



              A query to retrieve a detailed view of all the gangs,
              and minor view of the players (2*/1*/0*)

  

              B query to retrieve a detailed view of all the players
              in a gang with a list of their cars (0[gangname]/2*/1*)



              C query to retrieve a detailed view of all the cars of a
              specific player (2[gangname]/1[playername]/2*0



              D query to retrieve a list of gangs in light mode
              (1*/0*/0*)

 

              E query to retrieve all the cars in the game (0*/0*/2*)



         

          Test 34B Server startup



            Requirements:

               5.3, 5.3.1,



            Method: 

               

                Black box testing will be used.  Either the server has
                started or it hasn't :)



            Test procedure:



                The command to run the reports server will be called,
                and then a web browser will be used to test to see if
                it responds.





         

          Test 34C Server shutdown



            Requirements:

                5.3, 5.3.2,



            Method: 

               

                Black box testing will be used.  Either the server has
                stopped or it hasn't :)



            Test procedure:



                The command to stop the reports server will be called,
                and then a web browser will be used to test to see if
                it responds.


       3.5 Sound subsystem.

          1 Requirements

            4.3.1, 4.3.2

          2 Methods

            Manual black box testing will be used to test to see if
            the application plays sound or not.  The internals of the
            sound module are generally too complex to have every
            branch and instruction tested.

          3 Test Procedures

            We will start the application and log in once.  If we do
            not hear the login sound effect, the sound module is not
            working correctly.  The application also plays two songs
            as background music.  We will wait for the completion of
            the first song.  If the second song does not start up
            after the first is done, the jukebox is not functioning
            correctly.

       3.6 Login

           Requirements:
               1.1, 1.2

            
           Methods

           We will use manual black box testing to verify that the
           login process works as expected.


           Test Procedures

           Given a correct username and password combination and an
           incorrect username and password, try to log in with each.
           Verify that the correct combination validates and
           successfully logs in.  Verify that the invalid combination
           does not log in, and displays an error message informing
           the user of that fact.


-- p7 Traceability Matrix (sorted by Requirements)





Note: this is a nested list because I didn't really feel like trying
create a table in ASCII form





Requirements:

	3.01

	   33A

	
	3.02

	   33A
	

	3.1

	   33B

	3.2

	   33B

	3.4

	   33B

	3.5

	   33B

	3.7

	   33C

      5.3

         34A, 34B, 34C

          

      5.3.1

         34B



      5.3.2

         34C

         

      5.3.5

         34A



Test Analysis

Test Case               Pass/Fail  Fault Description

add/remove players      FAIL       When player is added, the other
                                   client computers crash.
move vehicle            PASS
collisions (3.3)        PASS
report server (3.4)     PASS
  reloading report server crashes?  (FAIL?)
sound subsystem (3.5)   PASS
login process (3.6)     PASS
