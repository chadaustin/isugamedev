Design Patterns within ChadWorld Design Discussion
From meeting with Neeraj Khanolkar on 2002.04.08
Last updated on 2002.04.29


After implementing Neeraj's suggestions about the design, our system
takes advantage of a few design patterns and idioms.  We originally
used Java object streams to send and recieve packets across a network
connection.  After replacing the object streams with RMI, the patterns
in the design became more apparent.

The most obvious pattern is what Neeraj called Remote Observer.  It's
very similar to the observer pattern, except that it operates across a
network boundary using RMI.  There is one server, and it registers
itself with RMI's naming service so that anybody can reference it.
The client connects by getting a handle to the server and registering
itself, inserting an avatar entity into the world.  At a fixed number
of frames per second, the server sends a copy of the world to all
registered clients so that they can render it properly.  The server
and client interfaces are similar to the following:

interface RemoteServer extends Remote {
  /*
   * Register a client with the server.  If authentication fails,
   * return -1.  Otherwise, return the entity id of the player's
   * avatar within the world.
   */
  int connect(RemoteClient This, String username, String password)
    throws RemoteException;

  /*
   * Disconnect the current client from the server, removing the
   * avatar from the world.
   */
  void unregister(RemoteClient This)
    throws RemoteException;

  /*
   * The server is responsible for taking key press events and handling
   * semantic actions.  This method informs the server that a key has
   * been pressed or unpressed.
   */
  void processKey(RemoteClient This, KeyEvent key)
    throws RemoteException;

  /*
   * Shuts down the server, unregistering it with RMI and stopping the
   * process.
   */
  void stop();
}

interface RemoteClient extends Remote {
  /*
   * This method is called when the server wants to notify the client that
   * entities have updated state.  The single parameter is an iterator that
   * walks through a collection of Entity objects that have new state.
   *
   * In this implementation, every Entity is passed into this function.
   * updateEntities() is called at a fixed rate, approximately 20 frames
   * per second, depending on the network latency.
   */
  void updateEntities(Iterator i);
}

Both static and dynamic objects in the world are considered entities.
There is a basic Entity interface that all entities must implement.
It provides methods for getting the entity's unique ID and creating a
scene graph node (relative to the world origin) so that the entity can
be drawn in the scene.

Unfortunately, letting entities draw themselves exposes the graphics
subsystem to the server, which, eventually, will be a problem.  :(  If
separating the server logic and entity drawing is ever required, I
originally thought that the Visitor pattern would come in handy.
However, the Visitor pattern does not work well when the node types
you can visit are a primary source of change.  Since they are probably
the greatest source of change in the system, I devised (at least
conceptually, I haven't tried to implement this yet) a system where
the server would have a list of Entity types, and the client would
have a list of EntityRenderer objects that are responsible for
converting entities into scene graph nodes.  This way, the server is
decoupled from any knowledge of how objects are drawn, and new
types of entities can be easily added to the system.  If a new kind of
entity is added to the server, the client must add a corresponding
EntityRenderer object and associate it with the type of entity on the
server.  If the client is told to draw an entity which it doesn't know
about, it would fall back on a default UnknownEntityRenderer to draw it.

I am not sure we will implement this for the next iteration, but in
the completed system, the Composite pattern is required.
Conceptually, the world is a heirarchical collection of objects.
Objects need to be grouped and manipulated in identical ways.  For
example, a house is composed of a roof, walls, a door, and some
windows.  Each subobject would be represented as a distinct object (or
composite object) combined with a group object.  The child objects
would be positioned and oriented within the world relative to the
center of the group object.
