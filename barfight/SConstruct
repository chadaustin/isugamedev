import os, string, sys
pj = os.path.join

# Check for the optimize option
optimize = 0
if ARGUMENTS.get('opt', 0):
   optimize = 1

# Check for an install prefix
if ARGUMENTS.get('prefix', 0):
   Prefix(ARGUMENTS['prefix'])


#------------------------------------------------------------------------------
# Define some generally useful functions
#------------------------------------------------------------------------------
def GetPlatform():
   "Determines what platform this build is being run on."
   if string.find(sys.platform, 'irix') != -1:
      return 'irix'
   elif string.find(sys.platform, 'linux') != -1:
      return 'linux'
   elif string.find(sys.platform, 'cygwin') != -1:
      return 'win32'
   elif string.find(os.name, 'win32') != -1:
      return 'win32'
   else:
      return sys.platform
Export('GetPlatform')

def BuildBaseEnvironment():
   "Builds a base environment for other modules to build on."
   global optimize, profile

   CXX = WhereIs('g++3') or 'g++'
   LINK = CXX
   CXXFLAGS = ['-Wall', '-Wno-non-virtual-dtor']
   LINKFLAGS = []

   if optimize:
      CXXFLAGS.extend(['-DNDEBUG', '-O2'])
   else:
      CXXFLAGS.extend(['-DDEBUG', '-g'])

   env = Environment(
      ENV = os.environ,
      CXX = CXX,
      LINK = LINK,
      CPPPATH = [],
      LIBPATH = [],
      LIBS = [],
      CXXFLAGS = CXXFLAGS,
      LINKFLAGS = LINKFLAGS,
   )

   return env


def ParseConfig(env, command, options):
   "Parses xxx-config style output for compilation directives"

   cmd = WhereIs(command)
   if cmd is None:
      print "Error: Could not find %s" % command
      sys.exit(-1)

   # Run the command
   cmd = cmd + ' ' + string.join(options)
   params = string.split(os.popen(cmd).read())

   # Parse its output
   for arg in params:
      switch = arg[0:1]
      option = arg[1:2]
      if switch == '-':
         if option == 'I':
            env.Append(CPPPATH = [arg[2:]])
         elif option == 'L':
            env.Append(LIBPATH = [arg[2:]])
         elif option == 'l':
            env.Append(LIBS = [arg[2:]])
         elif arg[0:11] == '-Wl,-rpath,':
            env.Append(LINKFLAGS = [arg])
         else:
            env.Append(CXXFLAGS = [arg])
      else:
         # Must be a static library, add it to the libs
         env.Append(LIBS = [arg])

def HasSiren(env):
   "Tests if the user has Siren available"
   sys.stdout.write('checking for siren ... ')

   cfg = os.path.join(env['with-siren'], 'bin', 'siren-config')
   found = os.path.isfile(cfg)

   if not found:
      cfg = WhereIs('siren-config')
      if cfg:
         env['with-siren'] = pj(os.path.dirname(cfg), '..')
         found = True

   if found:
      sys.stdout.write('yes\n')
   else:
      sys.stdout.write('no\n')
   return found

def SetupSiren(env):
   "Sets up the given environment for Siren"
   if not HasSiren(env):
      print 'ERROR: Could not find Siren installation.'
      sys.exit(1)

   cfg = pj(env['with-siren'], 'bin', 'siren-config')
   ParseConfig(env, cfg,  Split('--cxxflags --libs'))

def SetupPython(env, requiredVersion):
   "Sets up the environment for Python"
   print 'Looking for python 2.2 ...'
   python = WhereIs('python')
   if not python:
      print 'WARNING: Can\'t find python executable'
      return

   py_cmd = python + ' -c \'import sys; print sys.prefix; print sys.version[:3]\''
   (prefix, py_ver) = string.split(os.popen(py_cmd).read())

   # Version must match
   if py_ver != requiredVersion:
      print 'WARNING: Python version ' + py_ver + ' != ' + requiredVersion
      return

   # Build up the env information
   py_cpppath = pj(prefix, 'include', 'python'+py_ver)
   py_libpath = pj(prefix, 'lib', 'python'+py_ver, 'config')
   py_lib = 'python'+py_ver

   # Setup the env
   env.Append(CPPPATH   = [py_cpppath],
              LIBPATH   = [py_libpath],
              LIBS      = [py_lib, 'pthread', 'util'])

Export('ParseConfig')
Export('SetupSiren SetupPython')


def GetBarfightVersion():
   "Gets the Barfight version from the src/Version.h header"
   import re
   return '0.0.1'
#   contents = open('src/Version.h', 'r').read()
#   major = re.compile('.*(#define *BAR_VERSION_MAJOR *(\d+)).*', re.DOTALL).sub(r'\2', contents)
#   minor = re.compile('.*(#define *BAR_VERSION_MINOR *(\d+)).*', re.DOTALL).sub(r'\2', contents)
#   patch = re.compile('.*(#define *BAR_VERSION_PATCH *(\d+)).*', re.DOTALL).sub(r'\2', contents)
#   return '%d.%d.%d' % (int(major), int(minor), int(patch))


#------------------------------------------------------------------------------
# Grok the arguments to this build
#------------------------------------------------------------------------------
EnsureSConsVersion(0,13)
baseEnv = BuildBaseEnvironment()
Export('baseEnv')

opts = Options('config.cache')
opts.Add('with-siren',
         'Siren installation directory',
         '/usr/local',
         lambda k,v,env=None: WhereIs(pj(v, 'bin', 'siren-config')) != None
        )
opts.Update(baseEnv)
Help(opts.GenerateHelpText(baseEnv))


# Figure out the builddir situation
builddir = pj('build', GetPlatform(), 'obj')
distdir = pj('build', GetPlatform(), 'dist')
Export('builddir distdir')

# Recurse
subdirs = Split('data src')
BuildDir(builddir, '.', duplicate=0)
for dir in subdirs:
   SConscript(dirs = pj(builddir, dir))

Default('.')
